apiVersion: v1
kind: Namespace
metadata:
  name: louper-staging
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: louper-staging
  namespace: louper-staging
  labels:
    app: louper-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: louper-staging
  template:
    metadata:
      labels:
        app: louper-staging
    spec:
      containers:
        - name: louper-container-staging
          image: mark3labs/louper-web:staging
          volumeMounts:
            - mountPath: '/app/data'
              name: volume
          imagePullPolicy: Always
      volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: louper-staging-db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: louper-staging-db
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  generatedName: build-image-and-push-
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      containers:
        - name: gh
          image: pkgxdev/pkgx:latest
          imagePullPolicy: Always
          env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gh
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              pkgx install gh
              pkgx install jq
              pkgx install uuidgen
              gh auth
              export JOB_ID=$(uuidgen)
              echo '{"job_id": $JOB_ID }' | gh workflow run build-and-deploy-staging --repo mark3labs/louper-v3 --ref dev
              STATUS=(gh run list --workflow=ci.staging.yml --json "status,name" | jq '.[] | select(.name == "build-and-deploy-staging:$JOB_ID")' | jq '.status')
              echo $STATUS

          resources:
            limits:
              cpu: 1
              memory: 1Gi
      restartPolicy: Never
